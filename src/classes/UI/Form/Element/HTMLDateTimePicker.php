<?php
/**
 * File containing the {@see HTML_QuickForm2_Element_HTMLDateTimePicker} class.
 *
 * @package User Interface
 * @subpackage Form Elements
 * @see HTML_QuickForm2_Element_HTMLDateTimePicker
 */

use AppUtils\ClassHelper;

/**
 * EXPERIMENTAL! Element that is used to handle generate HTML input with type date and time together.
 *
 * @package User Interface
 * @subpackage Form Elements
 * @author Emre Celebi <emre.celebi@ionos.com>
 */
class HTML_QuickForm2_Element_HTMLDateTimePicker extends HTML_QuickForm2_Container_Group
{
    public const ELEMENT_NAME_DATE = '_date';
    public const ELEMENT_NAME_TIME = '_time';

    private HTML_QuickForm2_Element_HTMLDatePicker $datePicker;

    private HTML_QuickForm2_Element_HTMLTimePicker $timePicker;

    protected function initNode(): void
    {
        $name = (string)$this->getName();

        $this->datePicker = ClassHelper::requireObjectInstanceOf(
            HTML_QuickForm2_Element_HTMLDatePicker::class,
            $this->addElement('HTMLDatePicker', self::ELEMENT_NAME_DATE)
        );

        $this->timePicker = ClassHelper::requireObjectInstanceOf(
            HTML_QuickForm2_Element_HTMLTimePicker::class,
            $this->addElement('HTMLTimePicker', self::ELEMENT_NAME_TIME)
        );
    }

    public function getType() : string
    {
        return 'datetime';
    }

    /**
     * @param string|DateTime|array|NULL $value A date string in the format <code>Y-m-d H:i</code>,
     *          a <code>DateTime</code> instance, or an array with keys
     *          <code>date</code> and <code>time</code>.
     * @return $this
     */
    public function setValue($value) : self
    {
        if(is_array($value))
        {
            return parent::setValue($value);
        }

        $date = array(
            'date' => null,
            'time' => null
        );

        if($value instanceof DateTime)
        {
            $date['date'] = $value->format('Y-m-d');
            $date['time'] = $value->format('H:i');
        }
        else if(is_string($value))
        {
            $parsed = self::parseDateTimeString($value);

            if($parsed !== null) {
                $date = $parsed;
            }
        }

        return parent::setValue(array(
            self::ELEMENT_NAME_DATE => $date['date'],
            self::ELEMENT_NAME_TIME => $date['time']
        ));
    }

    protected function updateValue(): void
    {
        // Special case: The element's value has been specified
        // as a string instead of an array with child element
        // values. In this case, we need to parse the string
        // and set the child element values accordingly.
        //
        // This is to make it possible for anyone using the
        // element to work solely with date strings, while the
        // element internally continues using arrays.
        $ds = $this->getActiveDataSource();
        if($ds !== null) {
            $value = $ds->getValue($this->getName());
            if(!empty($value) && is_string($value)) {
                $parsed = self::parseDateTimeString($value);
                if($parsed !== null) {
                    $this->datePicker->setValue($parsed['date']);
                    $this->timePicker->setValue($parsed['time']);
                    return;
                }
            }
        }

        parent::updateValue(); // TODO: Change the autogenerated stub
    }

    private function getActiveDataSource() : ?HTML_QuickForm2_DataSource
    {
        $name = $this->getName();

        foreach ($this->getDataSources() as $ds) {
            if (
                (
                    !$ds instanceof HTML_QuickForm2_DataSource_Submit
                    &&
                    null !== $ds->getValue($name)
                )
                ||
                (
                    $ds instanceof HTML_QuickForm2_DataSource_NullAware
                    &&
                    $ds->hasValue($name)
                )
            ) {
                return $ds;
            }
        }

        return null;
    }

    /**
     * @return mixed|null
     */
    private function getDataSourceValue()
    {
        $ds = $this->getActiveDataSource();

        if($ds !== null) {
            return $ds->getValue($this->getName());
        }

        return null;
    }

    public function getDateElement() : HTML_QuickForm2_Element_HTMLDatePicker
    {
        return $this->datePicker;
    }

    public function getTimeElement() : HTML_QuickForm2_Element_HTMLTimePicker
    {
        return $this->timePicker;
    }

    public static function parseDateTimeString(string $string) : ?array
    {
        preg_match('/'.HTML_QuickForm2_Element_HTMLDatePicker::REGEX_GROUP_DATE.' '.HTML_QuickForm2_Element_HTMLTimePicker::REGEX_GROUP_TIME.'/', $string, $matches);

        if(empty($matches)) {
            return null;
        }

        return array(
            'date' => $matches[1],
            'time' => $matches[2].':'.$matches[3],
        );
    }

    public function getDate() : ?DateTime
    {
        $date = $this->getDateString();
        if($date !== null) {
            return new DateTime($date);
        }

        return null;
    }

    public function getDateString() : ?string
    {
        $date = $this->datePicker->getValue();
        $time = $this->timePicker->getValue();

        if(!empty($date) && !empty($time)) {
            return $date.' '.$time;
        }

        return null;
    }

    public function getValue() : string
    {
        return $this->getDateString();
    }

    public function __toString()
    {
        return $this->datePicker.'&nbsp'.$this->timePicker;
    }
}
