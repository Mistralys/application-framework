v1.17.0
- StringBuilder: Added `clickable()` for clickable texts with JS statements.
- StringBuilder: Added `codeCopy()` to add a "copy to clipboard" button for code texts.
- UI: Texts with a tooltip are now styled accordingly.
- UI: Buttons: Added `addDataAttribute()` to add `data-xxx` button attributes.
- Admin Skeleton: The `redirectXXX` methods now correctly state that they `never-return`.
- Application: Calling `Application::exit()` cannot be bypassed anymore.

Breaking change: Turning off `Application::exit()` means that processing all items in
a data grid multi-action is currently not possible anymore. This feature is under review.

v1.16.1
- Formables: Added the class `Application_Formable_Selector` that works without DB records.
- Formables: The RecordSelector now extends the base selector class.
- Tests: Fixed a test class property conflict.

v1.16.0
- Disposables: Added the disposable interface and trait.
- Logging: Added support for using placeholders in messages natively, without manual `sprintf` calls.
- Logging: Added the method `logSeparator()`.
- Logging: Added the method `logCloseSection()` for signaling when a section opened with a header is complete.
- Logging: Added the method `logEmptyLine()`.
- Loggables: Added `isLoggingEnabled()` and `getLogger()`.
- EventHandling: Added the possibility to turn events off (for disposables).
- Eventables: Listeners can now be identified in logs with their callback signature.
- Eventables: Fixed the `removeEventListener()` replacing all listeners with the one to remove.
- Revisionables: **Breaking** The event handling is now selectively revision-specific or revision-agnostic.
- Revisionables: **Breaking** Added the new abstract method `registerEvents()` for all revisionables.
- Revisionables: Moved the event handling to the base revisionable stateless class.
- Wizards: Improved logging, now using the loggable interface.
- RevisionStorage: Added the `RevisionAdded` event.
- DBHelper: Fetcher classes now support `whereValueIN()` and `whereValueNOT_IN()`.

> To update the revisionables, the method `registerEvents()` must be implemented,
> and use this method to register any events that are revision agnostic with
> `registerRevisionAgnosticEvent()`.

v1.15.4
- Localization: Better labels for the application's translatable categories.
- Localization: Updated AppLocalize package to v1.4.1.
- Localization: Added back button and application name to the editor.
- Dependencies: Updated AppUtils package to v1.6.0.
- UI: Added the `layout-only` core class for `<table>` elements used for layout purposes.
- Application: Added the constant `EVENT_DRIVER_INSTANTIATED` for the event name.

v1.15.3
- Notepad: Fixed the layout when not in the welcome screen.

v1.15.2
- Wizards: Added the optional `getIcon()` to steps to show them in the stepper nav.
- Wizards: Upgraded the template `content/wizard.php` to a class based template.

v1.15.1
- Welcome: Storing up to 60 items independently of max items.
- Welcome: Fixed sorting, now correctly ordered from most recent to oldest.
- Welcome: Fixed most recent items not appearing on top.
- UI: Added `ResizeSensor` javascript plugin for watching elements being resized.
- Notepad: Added Masonry to the notes layout.

v1.15.0
- Welcome: Added the new welcome screen feature.
- FilterCriteria: Database: Added `initQuery()` and `collectSelects()` for easy extension.
- FilterCriteria: Added new database filters base class with OO custom column handling.
- RevisionStorage: DBStandardized: Added `getFreeformKeyName()`.
- Admin: Added constants for the page request parameters (`page`, `mode`...).
- User: Added `getAdminSettingsURL()`.
- ApplicationJS: Added `autoRefresh()` for automatic refreshing of screens by interval.
- ApplicationJS: Added `UI.ScrollJumpToElement()` for scrolling without animation.
- Help: Upgraded the `UI_PageHelp` javascript class to an ES6 class.
- Notepad: Added pinning notes to the quickstart screen.
- Notepad: Added `getJSOpen()` and `getTooltipText()`.
- Tests: Added namespacing to the `getTestCounter()` method.
- User: Added `Application::getUserByForeignID()` and support methods.
- Themes: Converted some more templates to class based templates.
- Connectors: Added missing valid response code `202` for PUT requests.
- LookupItems: Added `idExists()` and `getItemByID()`.
- LookupItems: Added `getJSSearch()` for items for opening a direct search.

v1.14.0
- Notepad: Added the new notepad feature for taking notes.
- AppSettings: Added registering of known settings to display in the UI.
- AppSettings: The screens must now implement `_registerSettings()`.
- Themes: Added option to show the user's name in the meta navigation.
- Popovers: Added the `UI::popover()` method to create popovers.
- Buttons: Added popover capability to make buttons show popovers.
- BigSelection: The search now supports several search terms.
- BigSelection: Added a help button to explain the search capabilities.

v1.13.10
- DataTable: Added the `setUserKey()` and `getUserKey()` methods.
- ErrorHandling: Added recursive display of previous exceptions in the exception page.
- BaseCollection: Fixed an exception when resetting a collection with a parent record.

v1.13.9
- DataTable: Fixed a bug causing `getKey()` to return the wrong key value.

v1.13.8
- DataTable: Added possibility to delete existing keys.
- DataTable: Added testsuite with a special testing table in `/tests/testsuite.sql`.

v1.13.7
- DataTable: Added support for date values with microseconds.
- DataTable: Fixed a log message with missing data.
- Media: Fixed the application not exiting after sending media data.
- StringBuilder: Added `parentheses()` method to add "(text)" snippets.

v1.13.6
- Forms: VisualSelect: Added a checkered background to images to account for white on white images.
- CLIScreen: Fixed GetOpt return type validation message in PHPStan with new v4.0.0 release.

v1.13.5
- Session: Fixed not being able to switch roles in simulated session.
- API: Allow setting http response code when sending errors back.
- Driver: Log user rights if the user is not allowed for any admin areas.

v1.13.4
- Areas: CollectionSettings: Fixed a PHP error when not using a settings manager instance.

v1.13.3
- UI: Buttons: Fixed javascript onclick handlers not being rendered to HTML.

v1.13.2
- UI: Sidebar: Use the correct element to check if the sidebar exists.

v1.13.1
- UI: Sidebar: Check if the sidebar exists on the page.

v1.13.0
- UI: Added the `UI_Statuses` related classes to handle and render object state information.
- UI: Added a dedicated exception class, `UI_Exception`, based on `Application_Exception`.
- StringBuilder: Added the `blockquote()` method.
- Connectors: Improved the failed request exception: Added response body info.
- RecordSettings: Added the setting's `setStorageName()` method to specify a different name for the storage.
- RecordSettings: Added support for static settings that do not need a value.
- Enums: Revamped the `BasicEnum` class to streamline the internals; Removed non-strict checks.
- DBHelper: Added key default value generation by callback via `setGenerator()`.
- DataGrid: Added the array access interface to the `UI_DataGrid_Entry` class.
- Countries: Added the locale code parser utility, accessible via `parseLocaleCode()`.
- Countries: Added the `getByLocaleCode()` method.
- Driver Settings: Added the optional expiry date for settings.
- UI: Sidebar: Revamped the sidebar auto-scroll feature to fix issues when the sidebar is longer than the screen.
- Forms: Added new date and time selection elements.
- Navigation: Search: Added preselection of search scope and terms.

v1.12.11
- PropertiesGrid: Added conditional support to hide/show elements by criteria.
- PropertiesGrid: Added the `addMessage()` method to add an alert box.
- DataGrids: Added conditional support to columns to hide/show them by criteria.
- StringBuilder: Added the `tooltip()` method to create a text with a tooltip.
- AdminSkeleton: Made `redirectTo()` public.
- PrintView: Hiding some non printable UI elements.
- DBHelper: Record keys validation callbacks now get the full data set as second parameter.
- Revisionables: Fixed consecutive transactions not automatically changing the state.
- Functions: Added the `bool2string()` and `string2bool()` global functions, which do not throw exceptions.
- Countries: Restored the bottom margin with a subtitle present, since this has no margin top anymore.
- Updaters: Added the application version in the title bar.
- EventHandling: Added the `getArgumentString()` method in the event class.
- UI: Sidebar: Added support for a comments input field in the confirm message dialog.
- JavaScript: The `okHandler` parameter of `application.createConfirmationDialog()` is now optional.

v1.12.10
- Collections: Added the BaseRecord for non-database array-based data sets.
- DBHelper: Added the DataTable helper class used to handle record data tables.
- TestSuites: Automatically turn on devel mode in the test suites.
- EventHandling: Added type flavored `getArgumentXXX` methods in the event class.

v1.12.9
- Testsuites: Added the APP_TESTS_RUNNING constant when running the unit tests.
- Testsuites: Exception messages now include the developer info by default when running unit tests.
- DataGrids: Fixed the pagination menu input field closing the menu on click.
- DataGrids: Added number formatting to the entries counters.
- EventHandling: Bugfixes and enhancements in the Eventable trait.
- Dialogs: Fixed the header text having too big paddings.
- Buttons: Added a button interface to start unifying sidebar and UI buttons.
- Sidebar: Revamped the button template.

v1.12.8
- DataGrids: Search Widget: Allow search with empty strings.
- DataGrids: Tweaked the wrapping of the sorting icons.
- DataGrids: Added hover to the sorting icons.
- DataGrids: Tweaked the positioning of the checkboxes in multi selection mode.
- DataGrids: Fixed the full view feature layout.

v1.12.7
- Badges: Enum created for defining criticality of badge.
- EventHandling: Added the "Eventable" trait and interface to let objects use events easily.

v1.12.6
- DataGrids: Added a method to change the "Showing entries x of y" text in the footer.

v1.12.5
- Sections: Revamped the template, improved the layout somewhat.
- Sections: Added `getURLTarget()` to the tab class.
- QuickSelector: Fixed no rounded corners on the select when label is turned off.
- Navigation: Fixed the too high spacing between subnav and subtitle.
- Forms: Sections: Removed form required icon when section is not collapsible.

v1.12.4
- Navigation: Search: Added the optional countries selector.
- Navigation: Search: Fixed a bug in the scopeless mode.

v1.12.3
- DataGrids: Fixed an issue with counting items.

v1.12.2
- DataGrids: Added the "Mini" mode for slim grids via the `makeMini()` method.
- DataGrids: Added the possibility to mark entries as non countable via `makeNonCountable()`.
- DataGrids: Added a number of layout related methods to customize the look and feel.
- RevisionStorage: Fixed issue where the revision author is not updated correctly.

v1.11.0
- Sidebar: Added the possibility to collapse/expand the sidebar.
- Navigation search: Added a layout mode that uses the full page width.
- FilterSettings: Fixed not being able to modify the settings after adding them to the sidebar.
- UI: Tweaked the maximized layout by decreasing the side margins somewhat.
- Application settings: Fixed the filter settings increasing the width of the sidebar.
- Bootstrap: Added the documentation bootstrap screen for Markdown documentation.
- Application: Added the `getVendorFolder()` method.
- Composer: Updated dependencies to fix some of the deprecated warnings.

v1.10.0
- FilterCriteria: Split the database-specific filters into a separate abstract class, `Application_FilterCriteria_Database`.
- FilterCriteria: The base class `Application_FilterCriteria` can now be used for non-database collections.

v1.9.6
- Whatsnew: Added the possibility to use Markdown in the texts.

v1.9.5
- Environments: Fixed detection of local development hosts - now searching in full host name.

v1.9.4
- Users: Performance tweaks in the rights management.
- Connectors: Added the possibility to cache requests.

v1.9.3
- TestSuites: Added the createTestFormable() method.
- RecordSelector: Added support for groups/categories.

v1.9.2
- DBHelper: removed nextJSID() call in `OperationContext`, since the Session may not be ready yet.

v1.9.1
- FilterCriteria: Added the possibility to override the placeholder prefix in extending classes.
- FilterCriteria: `addSelectColumn()` now ignores duplicates.
- FilterCriteria: Added `getItemsDetailed()` to fetch records as well as the actual fetched data set.
- CollectionList: Modified `getEntryData()` to add the `$entry` parameter.
- User: Extended: Developers now correctly get the `Login` and `TranslateUI` rights.

v1.9.0
- Sessions: Moved the core mechanics to the base session class.
- Sessions: Added authentication type selection with auth traits.
- Sessions: Made some user rights core framework rights (`Login`, `Developer`, `TranslateUI`).
- Sessions: Added the "None" authentication trait to not use any specific authentication.
- Sessions: Added the "CAS" authentication trait; Moved the settings to matching `APP_CAS_XXX` constants.
- Sessions: Added the "OAuth" authentication trait for authentication via OpenAuth.
- Sessions: Added the `logOut()` method to the interface.
- Users: Moved the core mechanics to the base user class.
- Users: Made the system and dummy users a core framework feature, accessible via the `Application` class.
- Users: Removed the need for implementing the `createByID()` method, replaced by `Application::createUser()`.
- Users: Added `isSystemUser()`.
- Users: System users are inserted automatically when they are not present in the database.
- Users: Added the `user_emails` table to allow several email addresses per user.
- Users: Added the `getByEmail()`, which looks in the users table and the `user_emails` table.
- DBHelper: Added `startConditional()` and `commitConditional()` to avoid clunky IF calls.
- DBHelper: The instance IDs are now created using an internal counter to replace `nextJSID()`, which requires the session to be present.
- DBHelper: Added the record's `getRecordFloatKey()` method.
- DBHelper: Added the record's `recordRegisteredKeyBeforeModified()` method to track key changes before they are made.
- Application: Added static `isSystemUserID()` and `getSystemUserIDs()`.
- Application: Added static `redirect()`, extracted from the driver's `redirectTo()` method.
- Application: The `Application_Exception` class now extends the AppUtils' `BaseException` class.
- Logging: Added the logger's `printLog()` method.
- Environments: Added `requireTrue()` as environment condition check.
- Logging: Added the `logError()` method to the loggable trait and the logger.
- Bootstrap: Added the `createPage()` and `createTemplate()` methods to bootstrap screens.
- Collection screens: Changed some method signatures in the `CollectionCreate` and `CollectionSettings` traits.
- Collection screens: Added support for using a settings manager instance in the `CollectionSettings` trait.
- Forms: Streamlined the validator classes, by making them extend a base class.
- Forms: Added the `Percent` validator.
- Forms: Added the `ISODate` validator, extracted from the `UI_Form` class.
- Forms: Added the `UI_Form::addPercent()` method.
- Forms: Added the `UI_Form::addInteger()` method.
- Forms: Added the `UI_Form::addRulePercent()` method.
- Forms: Added the `UI_Form::addFilterComma2Dot()` method.
- Forms: Formable: Added the `Application_Formable_Generic` utility class.
- CollectionSettings: Added the record's editable status to automatically freeze the form as needed.
- CollectionSettings: Added the `isEditable()` abstract method to admin screen classes.
- CollectionSettings: Now correctly handing off needed tasks to the settings manager if present.
- Installer: Added the new installer tool, which can be used to install & update an application in an idempotent way.
- Logout Screen: Added a logout reason message when the user is not allowed to login.
- RecordSettings: Added filtering the form values for storage.
- RecordSettings: Added virtual settings that have not form element.
- RecordSettings: Added methods to handle updates to the records.
- RecordSettings: Better marked overridable methods and locked down some methods as final.
- AdminSkeleton: Added the loggable trait.

v1.8.3
- Ratings: Fixed a PHP error preventing the rating from being saved.
- Application: URL: Updated to use the AppUtils parseURL() function.

v1.8.2
- DBHelper: Record: Added the onBeforeDelete event.

v1.8.1
- Added the money and price icons.
- DBHelper: SettingsManager: Updated to handle default setting values.
- DBHelper: SettingsManager: Added methods to retrieve info on available settings.
- DBHelper: SettingsManager: Added config key validation capability.
- DBHelper: Collection: Added postConstruct().
- DBHelper: Collection: Added the possibility to specify record create options, which can be used in the _onCreated() method.
- DBHelper: Record: Added getInstanceID().
- Logging: Added logEvent().
- Changelogable: Added getChangelogQueueTypes().

v1.8.0
- User: Added the management of recent items a user worked with.
- User: Added typed setting methods (like getIntSetting(), getBoolSetting()...).
- UI: Added the welcome screen, showing quick links to often used screens and recent items.
- UI: Forms: Modified FormHelper::makeError to be more reliable.
- UI: Sections: Added setAnchor().
- UI: Icons: Added "colors" icon.
- Session: Added loggable interface.
- Added the TimeOfDay utility class.

v1.7.12
- LDAP: Added the possibility to set a suffix string for selecting members.

v1.7.11
- Application: Added isActive() to check if the session and user are available.
- Exception: Fixed a critical PHP error when the application has not been started, and the user instance is requested.

v1.7.10
- User: Added role management (currently only for simulated sessions).
- User: Added the roles overview to the developer rights info screen.
- Session: Improved simulated session user role selection handling.
- DBHelper: Added $newInstance parameter to createCollection(), to disable caching the instance as needed.
- DBHelper: Added logging to records.
- DBHelper: Added the capability to refresh records data within a request.
- User: Revamped the LDAP class, where connection parameters were hardwired.
- UI: Tabs: Added the possibility to add dropdown menu tabs.
- DBHelper: Added the silent parameter to all contexts.
- DBHelper: Added the 'Save' context used in the postSave() method.
- UI: QuickSelector: Improved the internals to make items entirely OOP.
- StringBuilder: Added linkRight() which creates a liked text only if the user has the specified right.

v1.7.9
- Maintenance: Fixed an issue with stylesheets not being present.
- Maintenance: Converted the template to a class based template.
- Logout: Converted the template to a class, and added an extensible method to easily add buttons when overriding in an application.

v1.7.8
- RenderableGeneric: Added ob_get_clean() with a return type check.
- DBHelper: FetchMany: Added orderBy().
- UI: Elements like buttons, tabs, navigation items and datagrid actions now support the conditional interface.
- CollectionSettings: Added separate user rights check for editing the form. Made readonly automatically on insufficient rights.
- CallableContainer: Added the helper class for working with callables with arguments.
- User: Added the extended user class with the new class based rights system.
- User: Added a developer admin screen to view the rights setup summary.
- FilterCriteria: Added the DEFAULT_SELECT constant with the standard select query string.
- MessageLogs: Fixed the app messagelog's filter settings and criteria throwing errors.
- DataGrids: Actions: Added a filter to see which records to delete when using processDeleteDBRecords().
- DataGrids: Added the 'Sums row' which can be used to display column totals in the footer.
- Driver: Fixed the internal value cache not being cleared when deleting a setting.
- DBHelper: Added a (backwards compatible) way to register required data keys, which are checked when creating new records to ensure all keys are present.

v1.7.7
- Revisionable: Fixed a type error.

v1.7.6
- DBHelper: Upgraded the exception to extend AppUtils\BaseException.
- DBHelper: Fixed a variable error in the dummy base record.

v1.7.5
- UI: Fixed clientside BigSelection class not loading in older Firefox versions because it used ES6 fields.
- Exceptions: Improved conversion of non-application exceptions.
- ErrorLogs: Now displaying developer information for non-application exceptions, when available.

v1.7.4
- UI: Tweaked the page subtitle badges not being indented.
- UI: Icons: Added the 'time' icon.
- DBHelper: Added fetch many groupBy().

v1.7.3
- Forms: Fixed a type error when validating an ISO date with a null value.
- DataGrid: Added the possibility to turn off the footer entirely.

v1.7.2
- FilterCriteria: Fixed several where methods that did not return an instance of the class as expected.
- Formables: Added an interface for the formable, to be able to define that the admin screen interface extends it. This makes it possible to see that screen interface objects actually have all the formable methods.
- DBHelper: Added createFetchMany().
- DataGrids: Added StringBuilder support to the action's setTooltip().
- Forms: Float validation rules now support spaces as thousand separators.
- StringBuilder: Added warning() to style text as warning.
- Admin: Added a trait for admin screens that need to be split further into display modes (like actions that handle more subactions).
- UI: Fixed spacing betweeen the country bar and the page subtitle when present.
- UI: Small layout tweaks for the subtitle.
- Forms: Added GetElementByID() to the registry.

v1.7.1
- Replaced the internals of the subset_sum function with the new SubsetSum package.
- DBDumps: Fixed an issue causing the create & download button not triggering the download.

v1.7.0
- Print: Removed the obsolete print version management.
- Print: Improved the existing ui-print.css to make use of the browser's default print view.

v1.6.6
- Media: Fixed media files not being displayed correctly because script mode was not turned on in the Media bootstrap.
- Media: Removed checking the ImageHelper::displayImage return value (there is none).
- Media: Cleaned up the delivery class somewhat.
- Forms: Fixed a PHP type error when using the form renderer's comments generator.

v1.6.5
- UI: PropertiesGrid: Added the "Merged" property type.

v1.6.4
- Revisionables: Fixed missing parameters pass-through in setRevdataKey().
- Core: Replaced deprecated AppUtils highlighting methods.
- Icons: Added "Audience" icon.
- DBHelper: Fixed minor issues in the LooseRecord.
- Exceptions: Added more information to the error screen.

v1.6.3
- DBHelper: Added the LooseRecord trait for working with DB records without using a collection.

v1.6.2
- Formables: Text elements now pass through registerFormableElement() as expected.

v1.6.1
- UI: StringBuilder now extends AppUtil's StringBuilder.
- UI: UI_Button fully type hinted.
- UI: UI_QuickSelector fully type hinted.
- Forms: Erroneous elements in clientside forms now automatically expand their parent form sections.
- Application: Replaced exit() with Application::exit() wherever applicable.
- UI: Fixed loadkeys not being cleared properly when calling clearLoadKeys().

v1.6.0
- Generalized PHP strict mode adjustments sponsored by PHPStan validation level 5.
- Corrected and added lots of type hints, refactored some classes and co.
- PHPStan validation is now clean at level 5 except for a couple special cases.
- Complete refactoring of the form rendering layer, to fix long standing issues and improve maintainability.
- nextJSID() now uses a session stored counter, to account for HTML contents retrieved via AJAX, to avoid ID duplicates.
- All form creation methods now require a form name to be specified. This previously used nextJSID(), which was not ideal to begin with.
- StringBuilder: Added info() for informational texts.
- Clientside JS: Added log method flavors in application.js (logError, logEvent, logData, logUI).

* Breaking changes: Order of createForm() method parameters changed to form name first (mandatory) and default data next (optional)

v1.5.5
- Application: Added the UnexpectedInstanceType exception.
- UI: Added the UI_Traits_RenderableGeneric trait.
- Application: Added the loggable trait and matching interface.

v1.5.4
- Interfaces: Added a lockable screen interface.
- Wizards*: Wizardable and steps now fully implement screen interfaces.
- UI: Clientside resource loading: Fixed the broken AJAX loading of keys.
- UI: Added addResource().

* Breaking changes: Wizard steps must now implement isMode(), isAction(), isSubmode() methods.

v1.5.3
- Countries: Fixed missing method in the countries selector.

v1.5.2
- UI: Flags: Removed CSS styles that broke the flags in some cases.
- Localization: Fixed the javascript parser exludes list for the CKEditor.
- RecordSelector*: Easier option customization using the new `configureEntry` method.

* Breaking changes: RecordSelector: Removed resolveRecordLabel() and resolveRecordID().

v1.5.1
- MarkupEditor: Fixed CKEditor missing some styles.

v1.5.0
- UI: Clientside resource loading: Fixed resource duplicates being loaded.
- UI: Moved resource loading to a dedicated class.
- Templates: Added support for class-based templates.

v1.4.9
- DataGrid: Added the possibilty to disable the form tag via disableForm().
- DataGrid: Fixed wrong position of <tbody> tag in the DOM.
- DataGrid: Fixed duplicate cell element IDs.
- Forms: Fixed buttons leaving ghost div elements behind in the DOM.
- Icons: Added Email icon.

v1.4.8
- MarkupEditor: Added UI::getMarkupEditors for a full list with human readable labels.
- AppSettings: Modified the app settings screen to show and edit all settings.

v1.4.7
- FilterSettings: Fixed missing set of parentheses around the search statement.
- MarkupEditor: Added support for the CKEditor.
- MarkupEditor: Added possibility to localize the editors using a country instance.
- UI: Template: Added getStringVar() and getArrayVar().

v1.4.6
- RecordSelector: Added setPleaseSelectLabel().
- RecordSelector: Fixed the please select entry not showing up in the Multiselect mode.

v1.4.5
- Formable: RecordSettings: Added the extended version that allows creating and saving records.
- Templates: Added getObjectVar() to enforce specific class instances in template variables.

v1.4.4
- Dependencies: Increased mistralys/application-utils requirement to v1.2.
- Logging: Added logging of exception stack traces
- UI: Tabs: Fixed an HTML nesting error that prevented switching between tabs.

v1.4.3
- Application: Added setExitEnabled(), mainly for testing purposes.
- ImageUploader: Fixed the even sized image dimensions check.
- Exception handling: Tweaked the output buffering, fixed a level of buffering not being cleaned up correctly.
- Exception handling: Non-Framework exceptions are now automatically converted so they can be logged.
- Exception handling: Added the full trace and details to previous exceptions in the error page.

v1.4.2
- Errorlog: Fixed a type error causing the month viewer to fail.
- Revisionables: Fixed DBStandardized::nextRevison() ignoring the state.

v1.4.1
- Countries: Fixed mixups with UK iso codes, "uk" and "gb". Both can now be used interchangeably.

v1.4.0
- UI: Fixed client library loadkeys bug leading to library duplicates being loaded.
- UI: Fixed bootstrap URL in the exception error page.
- Code: Numerous fixes and optimizations via PHPStan analysis.

v1.3.18
- Forms: Unified the JS submit handlers further, centralizing it via UI_Form::resolveFormName().
- Forms: Added the ISODate element with matching validation, using addElementISODate() in the formable.
- Sidebar: Buttons: Clickable submits now support data grids fully, including isFormSubmit().
- Sidebar: Developer panel: It is now possible to convert data grid submit buttons.

v1.3.17
- Forms: Fixed a variable name typo in UI_Form::renderJSSubmitHandler().
- DBHelper: Added whereValueNot() to the fetcher.
- DBHelper: BaseCollection: Added the "BeforeCreate" event, used to validate data before inserting it.
- UI: Sidebar: Added addSubmitButton() to the developer panel.
- Admin: CollectionSettings: Fixed the way the redirect URL is resolved in create mode.

v1.3.16
- Countries: Added the label feature to the ButtonBar.
- FilterCriteria: Added whereColumnNOT_Equals() and whereColumnNOT_Empty().
- Traits: CollectionSettings: Added _handleRecordLoaded() to execute actions once the record has been resolved.
- Forms: Improved UI_Form::renderJSSubmitHandler() to handle all possible form variations.
- UI: Navigation: Added clearItems() to remove all previously added navigation items.
- UI: Sidebar: Improved the button's makeClickableSubmit() to handle all possible form variations.
- UI: PropertiesGrid: Added neutral colors for the boolean row via makeColorsNeutral().
- UI: Icons: Added the Countries icon.

v1.3.15
- UI: Messages: added setMessage() to set the message text after instantiation.
- UI: Sidebar: Button confirmation messages now allow setting the loader text.
- UI: Conditionals: Unified the interface to allow setting a reason text.
- Revisionables: Events: Automatically converting single non-array parameters to triggerEvent() to an arguments array.
- UI: Sections: Added support for using renderables in the section title.
- UI: Sidebar: Button disabled help texts now accept renderables.
- UI: Fixed the body being smaller than the content in smaller resolutions.

v1.3.14
Formable: RecordSettings: Added expand().
Traits: CollectionSettings: Fixed edit screens not using the refresh URL.

v1.3.13
- RecordSelector: Fixed the name of the empty dummy form element not inheriting the expected name.
- RecordSelector: Fixed the setEmptyMessage() method having no effect.

v1.3.12
- Countries: Fixed the getLocaleCode() method returning the wrong format.
- StringBuilder: Added age().
- DBHelper: Added operation contexts to authenticate events
- DBHelper: Added context to onCreate events
- DBHelper: Added the onDelete event

v1.3.11
- API: Updated DescribeCollections to support abstract DBHelper collections.
- Countries: Fixed the selector always disabling invariant countries.
- RecordSelector: Updated to use the Optionable trait.
- RecordSelector: Added enableSorting() and setSortingCallback().
- RecordSettings: Deferred the initialization to allow configurations before registering settings.
- StringBuilder: Added quote().
- DBHelper: Added the createFetchOne() and createFetchKey() methods.
- FilterCriteria: Add the hasCriteriaValues() method.
- DBHelper: Added the extensible postSave() method to records.

v1.3.10
- DBHelper: Added the base record initDummy() method to initialize dummy objects (used instead of init(), which is not called for dummy objects).
- Revisionables: Title: Fixed not calling the parent constructor.
- Admin: Revamped the screen handling internals to unify the way screens are instantiated and handled.
- Admin: Render handling moved into the screen trait.
- Driver: Fixed creating areas always in admin mode: default is now not admin mode, and only the active area is created in admin mode.
- Driver: Added getCurrentURLPath(), getURLParamNames(), resolveURLParam(), getScreenByPath() and screenPathExists().
- StringBuilder: Added hint().

v1.3.9
- Environments: Fixed apache_getenv not being available when running in CLI mode.
- Formable: The settings management class has been enhanced to auto-initialize the formable with default values.
- DBHelper: Base records now have the getFormValues() method.
- UI: The page helper now has a new addHeader() method.
- UI: StringBuilder: Added ul(), li(), html() and nospace().
- UI: Page title: Added missing rendering of the append texts.
- FilterSettings: Added addElementSwitch().
- Formable: Added addRuleRegex()
- Formable: Fixed error messages when trying to set the same hidden variable more than once.
- Forms: Added addRuleRegex().
- RevisionStorage: Fixed trying to write NULL values to the revdata table.
- RevisionStorage: Fixed hardwirded primary key names in the DB CopyRevision class.
- Connectors: Added getPayload() to the request.
- Connectors: Added getRequest() to the response.
- UI: Tabs: Added hasTab().
- UI: Button: Fixed the javascript error when using loaderRedirect().
- UI: Added support for the "unstyled" class for <pre> tags.
- RevisionStorage: Added setFreeformKey() and getFreeformKey() to the DBStandardized storage.

v1.3.8
- UI: PropertiesGrid: Added addDate()

v1.3.7
- Environments: Fixed prod environments being registered as dev.

v1.3.6
- Environments: Added the environment detection mechanism classes.
- Application: Added isLoggingEnabled() and getLogMode().
- Bootstrap: Added boot_constant() and boot_defined().
- Application: Added the applog to the exception screen in developer mode.

v1.3.5
- Connectors: Response now supports {RESPONSE} tags in the response body.
- Connectors: Improved exception developer details to include tons of information.
- DataGrid: Improved action redirect messages, now with $label in the single message.
- UI: QuickSelector: Restored displaying the selector, which was being ignored.
- UI: PropertiesGrid: Now implementing the renderable interface.
- UI: PropertiesGrid: Added addByteSize().
- UI: StringBuilder: Added pre().
- DataGrid: Added automatic conversion of date objects to list labels.
- UI: Badges: Added makeLarge() for bigger labels.
- DBHelper: Added setRecordDateKey() in records.

v1.3.4
- Connectors: Modified exception to access more information on errors.

v1.3.3
- Revisionables: Rendering title strings has been replaced by creating a revisionable title instance.
- Revisionables: The revisionable title class has been revamped to configure the content renderer.
- DBHelper: Added collection->getDataGridName() to automate grid naming in collection lists.
- Forms: Fixed form renderer proper y conflict.
- UI: Badges: Added setWrapper() to be able to wrap a badge in another HTML element.
- UI: Page: setTitle() now enforces a no HTML rule.
- UI: Page: Added resolveTitle().
- UI: Page: Moved createTemplate(), renderTemplate() and createMessage() to the renderer.
- UI: StringBuilder: Now ignores empty strings.
- UI: Added the Title and Subtitle classes used to handle rendering of the page title and subtitles.
- Core: Added the Application_ValidationResult class.
- Countries: Added the getLocaleCode() method to retrieve the "de_DE" style code.
- Formables: Added the makeReadonly() method.
- UI: Buttons: Added the makeSpecial() method.
- UI: Icons: Added the "build" and "code" icons.
- UI: Improved the page help layout.
- Connectors: Added support for simulating request responses.
- Core: Added the Simulatable trait and matching interface.

v1.3.2
- Fixed the version file number mismatch.

v1.3.1
- UI: Fixed BigSelection, Forms and Tab issues.

v1.3.0
- UI: Added the application.redirectWithoutLoader() method.
- UI: Individual tabs in a Tabs control can now be linked to a static URL.
- UI: Bootstrap elements now use the Classable trait.
- UI: Fixed dropdown menus ignoring custom added classes.
- UI: Added QuickSelector->setLabel() method to change the default "Quick selection" text.
- UI: Renderable made dependent on the page to inherit the UI from it.
- UI: Templates: Added support for tabs below the subnavigation.
- UI: Added the UI_StringBuilder class and the matching UI::string() method and global sb() function to easily concatenate strings.
- UI: Added UI_Page::getNavigation() method.
- UI: Added "Users" and "List" icons.
- UI: Added UI_Navigation::appendHTML() method.
- UI: UI_QuickSelector now allows setting classes for the main HTML element.
- UI: Improved the help widget layout.
- UI: The content renderer instance has been moved to the UI_Page class, so it is global to the page.
- UI: Added the requireRenderable() method.
- UI: The BigSelection UI helper now has filtering capabilities clientside.
- Admin: The context menu is now accessible via UI_Page::getContextMenu, when a subnavigation is present.
- Admin: The context menu is created automatically on demand in the subnavigation.
- Admin: Unified admin screens to use the same UI system without duplicating code.
- Admin: Added Skeleton->configureDataGrid(), which automatically gets all relevant page hidden vars.
- Admin: CollectionSettings: Added validateRequest(), _handleAfterSave(), getAbstract() and parent record title if available.
- Templates: Moved the common codebase of the content templates into the frame.content.upper-scaffold.php template.
- DBHelper: Added DB switching and column name validation.
- DBHelper: Added fetchAllIntKey()
- DBHelper: Moved contained classes to a separate files.
- DBHelper: BaseCollection: Revamped startup sequence to allow using the init() method with the parent record present.
- DBHelper: BaseCollection: Added the resetCollection() method.
- DBHelper: BaseRecord: Added support for custom properties that are not directly saved to DB.
- DataGrids: Added the redirect message class used to automate redirects after a multi-action.
- DataGrids: Added createRedirectMessage() in the base action class.
- Countries: Added includeInvariant parameter to getAll().
- Countries: Added Application_Countries->getInstancesByIDs() method.
- Countries: Added the country selector helper.
- Countries: Added the excludeInvariant() method to the filter criteria.
- Countries: Added the createButtonBar() method to display a countries selection widget.
- FilterSettings: Added addElementSelect() method.
- FilterSettings: Added configureSearch() utility method.
- FilterSettings: Added inject_search() utility method.
- FilterSettings: Added injectElementsContainer() method, to allows injecting elements with individual methods.
- FilterCriteria: Added support for escaping field names to avoid quoting them using "\fieldname".
- FilterCriteria: Added support for array values in addWhereColumIN().
- Forms: Added tooltip parameter to addLinkButton(), addPrimarySubmit() and addSubmit().
- Forms: Fixed appendGenerateAliasButton() not using the source element's label.
- Formable: Fixed multiple dummy submit elements having the same name/id.
- Formable: Added addRuleEmail().
- Formable: Formable containers can now override the initContainer() method.
- Formable: Added settings management class for DBHelper records, Application_Formable_RecordSettings.
- Formable: Added the base class for DBHelper collection record selectors.
- Misc: Application: Added Application::requireCallableValid().
- Misc: Dependencies: Converted FileHelper::findFiles calls with the FileFinder.
- Misc: Markup Editors: Added a check for running in CLI context (for unit tests).
- Misc: Media: Added logging in image documents for easier debugging of media paths.
- Misc: Tests: The tests now use their own separate database credentials.
- Misc: Global functions: Added toString() which enforces string values for UI_Renderables, strings and numbers.
- Wizards: Added wizard::getButtonConfirmLabel() and getButtonConfirmTooltip().
- Wizards: The button navigation now automatically displays a confirm button on the last step.
- Wizards: Added step's overrideable handle_cancelWizardCleanup() method for custom cleanup operations.
- Revisionables: Added possibility to specify a changelog data array when calling setRevisionKey().

v1.2.24
- Hotfix version
- Logging: Added logging of exception stack traces.

v1.2.23
- Countries: Added country caching, to avoid repeating the query.
- User: Added an error message when trying to use a non-scalar value for settings.
- ErrorLogs: Implemented OOP access to error logs.
- ErrorLogs: Revamped the interface to view errors.
- DataGrid: Added setSortingNumeric() and setSortingString() for columns.
- UI: Added the application.host and application.environment JS variables.
- AppUtils: Updated for the latest package changes.
- Request: Updated to set the base URL on init.
- Application: Added the exit() method to use instead of die() or exit() PHP calls.

v1.2.22
- Markup Editors: Added the possibility to work with different markup editors.
- Redactor: Restored the original source of the main redactor.js script (was broken at some point).
- Redactor: Added the superscript button manually in the source.
- Redactor: Added translations for the buttons manually in the source.
- Redactor: Added a hint that it does not work correctly in Chrome.
- Forms: Add the element renderer's getFormElement() method.
- Forms: Added a padding to the standalone Textarea element so it does not touch the borders.

v1.2.21
- Forms: Fixed the hexColor field's validation triggering even when empty.

v1.2.20
- Users: Added tracking of the roles requested of the user in a request.
- UI: Fixed the blue gap under the body when the locking manager is disabled.
- UI: Revamped the unauthorized page by moving it to its own template file.
- JSHelper: Moved to AppUtils package, extending it to keep the Tooltipify method.

v1.2.19
- Formable: Added the HexColor field type.
- Localization: Added the framework's localization editor under /localization.

v1.2.18
- Sessions: Added support for specifiying session rights presets as arrays.
- Users: Added the Application_User::roleExists() method.
- Templates: Fixed a typo in the frame.content.section template.

v1.2.17
- Icons: Added the new "Global" icon.

v1.2.16
- Events: Added the DriverInstantiated event.
- Localization: Now automatically refreshing client includes on version change.

v1.2.15
- API: Fixed the describe admin areas API breaking on wizard steps.
- API: Describing admin areas now uses the FileHelper to parse PHP class files.
- Driver: Moved the Driver interface to its own file.
- Driver: Added the describeAdminAreas() method.
- Tests: Added a base class for admin area testing to extend by the application's testsuite.

v1.2.14
- UI: Now adding tooltips to all elements with the data-toggle="tooltip" attribute.
- Localization: Added the pts() function.
- Tests: Added automatic loading of test support classes.
- Connector: Added the request's getPostData() method.
- Connector: The response's getURL() method now includes the post data.

v1.2.13
- DBhelper: Preparing for the migration to the external package.

v1.2.12
- Core: Replaced parse_str calls with ConvertHelper::parseQueryString to avoid dots to underscore conversion in parameter names.

v1.2.11
- Dependencies: Changed the mistralys/application-utils to use the v1.1+ releases.
- API: Fixed a translateable string.
- Translations: Updated and cleaned up with latest localization library release.

v1.2.10
- Dependencies: Removed dependencies not required by the framework itself, but by the mistralys/application-utils package.
- Configuration: Added the optional APP_UI_LOCALES config setting to specify locales of the UI itself.
- Dependencies: Changed the mistralys/application-utils to use the v1.0+ releases.

v1.2.9
- Dependencies: Added medialize/uri.js repository link - it is not registered in packagist.

v1.2.8
- Dependencies: Moved medialize/uri.js dependency: mistralys fork was merged into main branch.

v1.2.7
- Dependencies: Adjusted the locales selector method name to the new name (renamed in mistralys/application-localization)

v1.2.6
- UI: Fixed the javascript error when using the default language in the user settings
- UI: Slightly revamped the driver's stylesheets and javascripts includes setup to be more readable

v1.2.5
- Dependencies: Moved the DeepL helper to a separate library

v1.2.4
- Dependencies: Packages mistralys/application-utils and mistralys/application-localization moved to packagist
- Dependencies: Quickform2 fork moved to separate packagist package

v1.2.3
- Dependencies: Moved the translation classes to a speparate package

v1.2.2
- Forms: Fixed an error in the form element renderer when passing renderable objects

v1.2.1
- Media: Added the possibility to connect uploads to media documents, to keep track of which ones were converted for easy cleanup
- Media: Added related methods to the Application_Uploads_Upload class

v1.2.0
- Application: Moved the helper classes to a separate GIT repository
- Application: Namespaced the helper classes
- Application: Fixed a number of PHP validation notices
- DeepL: Added the DeepL helper class to fetch data via the API
- Countries: Added language information for known countries
- Forms: Revamped element rendering to allow more flexibility
- Forms: Added element render callback for easy adjustments
- Revisionables: Added methods to retrieve revdata key values
- Forms: Element append and prepend HTML unified and improved
- Icons: Added "Review" icon
- Buttons: Added the "Dull" button style (between default and invert) via makeDull()
- Buttons: Added the makeDefault() method
- UI: Added the createTemplate() alias for getPage()->createTemplate()
- Icons: Added the display() method
- Message Boxes: Added an inline mode to display them inline with text
- Message Boxes: Fixed some small issues with the slim layout
- Core CSS: Gathered all alert styles in one section
- Forms: Tweaked font display of help blocks
- Forms: Added word wrap breakpoints to labels with underscores

v1.1.21
- Application: Improved the display of dumped arrays when logging
- Forms: Fixed a typo in the addRuleFilename() method
- Formable: Added the getFormableInstanceID() method
- Formable: Added the addRuleFilename() method
- Formable: Containers now auto-initialize themselves when the parent is already initialized
- Forms: Fixed elements not showing up as required when requirement is dependent on a rule tied to another element
- Forms: Added the getRequiredElements() method
- Forms: Cleaned up the renderer somewhat, moved element type rendering to separate methods
- Forms: Added the possibility to hide/show the required icons on the client side with the setRequired method
- Wizards: Added a developer button for the next step for debugging
- Whatsnew: Now using the extended version string to allow for named releases to be shown correctly
- Formable: Added logging with instance information
- Formable: Added the switchFormable() method in containers to allow changing the parent on the fly
- Revisionables: Fixed a typo in the revdata table data copying
- Wizards: Simulation mode now does not reset the wizard on completion
- Icons: Added the "Status" icon

v1.1.20
- Uploads: Fixed missing interface method

v1.1.19
- Flags: Added international flags CSS library dependency
- Formables: Added the Application_Formable_Container that can be used to use an existing formable natively
- Wizards: Added the getAbstract() wizard step method to display a page abstract when available
- Forms: Added element type classes to form element containers
- Countries: Added the getIcon() method for countries
- Wizards: Added possibility to review a wizard's already completed step
- ConvertHelper: Added the string2hashShort() method
- Wizards: Added support for a custom cancel URL for the wizard
- Formable: Fixed the makeRequired method ignoring the provided error message
- Icons: Added the "Suggest" and "File" icons
- JS Forms: Added the Hide() and Show() methods for whole forms
- JS Forms: Removed a duplicate method in the elements base class
- Clientside AJAX: Added the SetMethod() method to be able to set this after initialization
- JS Class: Added the base RequireMethod() Method used to ensure classes implement a specific method
- Wizards: Added the wizard parameter to allow several parallel wizard sessions
- UI: Added the setTitleSubline() method to the content renderer class
- Revisionables: Added revision data support to save revision-specific data
- Revisionables: Revamped the setKey() method to make the comparison more solid; renamed it to setRevisionKey()
- Revisionables: Moved the interface to a separate include file
- ConvertHelper: Added the areVariablesEqual() method
- UI: Added the createMessage() method, which was only accessible via the UI_Page class before
- Forms: Now avoiding to register custom elements on each form instantiation
- Messages: Added the possibility to set custom message icons
- Messages: Changed some method names for consistency (removed disableDismissable and enableDismissable, replaced with makeDismissable)
- Messages: Added the large layout via makeLargeLayout()
- Exceptions: Improved the developer error trace display
- FilterCriteria: Added support for specifying a table alias with the setSelectAlias() method
- Forms: Fixed element appends and prepends bottom margin in condensed forms
- Testsuites: Added some tests
- ConvertHelper: Fixed some issues in the filenameRemoveExtension method
- ConvertHelper: Fixed an issue in the isStringASCII method
- NumberInfo: Added additional variable type checks
- NumberInfo: Moved the tests to the test suites of the application
- VisualSelect: Added the possibility to not select any image
- Serverside AJAX: Now displaying exception details in developer mode and simulation enabled
- Media: Added the getFilename() method to the interface
- ConvertHelper: Added the callback2string() method to dump a callback variable
- Forms: Added the UI_Form:setDefaultValues() method to set these after creating a form
- Forms: Added the addRuleFilename() method and auto-validation hints
- Traits: Added the "Iconizable" trait for all elements that can have an icon set

v1.1.18
- Added missing translations

v1.1.17
- Filter Settings: Added the "More" feature to expand/collapse long setting forms
- Filter Settings: Moved CSS to a separate file

v1.1.16
- VisualSelect: Added the possibility to turn off automatic sorting
- NumberInfo: Added more tests; bugfixes
- CSVHelper: Fixed a PHP notice in the parsecsv library by changing constructor parameters

v1.1.15
- ImageHelper: Added the createFromPath method
- ImageUploader: Added rules for even dimensions validation, and minimum size
- NumberInfo: Added the new parseNumber() function to create a NumberInfo instance

v1.1.13
- Client UI: Can now set a target for UI menu items
- DBRevisionables: Fixed a PHP warning regarding a continue statement in a switch
- Request: The boolean parameters now return a boolean value when getting the value
- ConvertHelper: Modified the implodeWithAnd method so it does not add spaces to the conjunction
- Formable: added the setCollapsed() method in the header with a boolean parameter

v1.1.12
- Whatsnew: fixed the AJAX error when trying to open the dialog

v1.1.11
- UI: Added the possibility to enable automatic sorting in the QuickSelector
- Media: Added possibility to retrieve a document directly from a form value
- Media: Added the isMediaFormValue() method to check if a form value is a media value
- Traits: The collection settings now automatically convert media values to media IDs
- Traits: Added the admin areas CollectionCreate action base class
- Fixed a PHP7 warning in the jtokenizer class

v1.1.10
- AjaxMethods: Added the initCORS() method to set up CORS when needed
- CORS: Added a forbidden HTTP header when a CORS request is denied, since Chrome simply displays an empty result otherwise
- UI: Fixed the element ID in revisionable titles: the type name was missing
- Application: Added the APP_DB_ENABLED setting to turn database usage on or off
- Application: Added database-less support for basic operation
- User: Added switchable storage types, database or file
- User: Automatically switches to file storage if DB disabled
- Driver: Added switchable storage types for application settings, database or file
- Driver: Automatically switches to file settings storage if DB disabled
- Events: Added the SystemShutDown event that can be used for cleanup at the end of the request
- Driver: Added the overloadable _start() method
- Templates: Fixed an error message in the updaters.selection-screen template
- Bootstrap: Fixed error messages

v1.1.9
- Removed the need to call apply() on form headers
- Fixed an issue with Symlinks in the SVNHelper

v1.1.8
- Formable: Added the header utility class to make handling form headers easier
- Icons: Added a new icon
- Formable: Added error checking to the addRuleRequiredIfOther method
- Formable: Added the addRuleRequiredIfOtherNonEmpty method

v1.1.7
- VisualSelect: Improved the visual select with support for grouped items
- VisualSelect: Added support for large item selections
- Forms: Fixed a notice in the content renderer
- UI: Added two new icons
- Forms: Updated to work with the current HTML Quickform version

v1.1.6
- Formable: Fixed comparison operators being ignored in the addRuleRequiredIfOther() method

v1.1.5
- UI: Added the methods setID() and getID() to the UI_Label class

v1.1.4
- Formable: Added the addRuleRequiredIfOther() utility method
- Added missing translations

v1.1.3
- Form validation: Added alias with uppercase characters
- DBHelper: Added the fetchData() method
- Formable: Made the addFormablePageVars method public
- DataGrid: Added the possibility to pre-select list entries
- DataGrid: Added the getCheckboxID() method to entries to add clickable labels
- DataGrid: Added the action getSelectedValues() method
- DataGrid: Added the possibility to style rows with the entry class
- DataGrid: Added the addTableClass() method
- Connector: Improved the response's throwException() method with optional message and error code
- Themes: Added the content renderer class
- Themes: revamped the frame structure to allow more flexibility
- Themes: Moved some aspects of the layout to separate templates
- UI: Improved content section layout
- Themes: Tweaked font sizes
- Driver: Replaced the renderXXX methods with the content renderer where applicable
- Added the custom application settings developer screen
- Added a separate stylesheet for the form handling
- Fixed revisionable titles setLabel method not having any effect
- Added correctly style form abstracts

v1.1.2
- Ratings: Modified the rating widget to be less disruptive with elements at the end of the page
- SVNHelper: Unified the last logging call so the log callback works for all locations
- SVNHelper: Fixed Symlinks breaking the relativizePath method; now using realpath on all absolute paths
- SVNHelper: Added a check for empty paths
- DataGrids: Added merged cell rows
- Localization: Added missing translations
- Localization: Added the vendor folder to the excludes list
- Localization: Fixed the localization not finding the application clientside strings
- HealthMonitor: Fixed the class loading
- HealthMonitor: Made it possible to add custom application components
- Print mode: fixed URLs being shown next to links
- Print mode: Fixed data grids paging being disabled
- Print mode: Removed column sorting icons in data grids
- UI: Added the country navigator UI helper
- UI: Added the addWarningMessage method.
- WhatsNew: Revamped the whatsnew information handling
- Formable: Added the appendElementHTML() method
- Connector: Added the getRawJSON() method
- Connector: Fixed checking the returned JSON; Empty arrays are no longer considered invalid
- ConvertHelper: Added the print_r method
- JSHelper: Avoided duplicate tooltipify calls
- UI: Added the possibility to append includes to the bottom of the body in case some get added too late for the header

v1.1.1
- SVNHelper: Added failed connection checks
- SVNHelper: Added some docblocks
- SVNHelper: Made an error message more explicit
- Theming: Renamed bootstrap and jquery files to remove the version info, which only confuses things
- TestSuites: Added a first draft of the framework's test suite
- UI: Added the new rating feature to allow users to rate specific features

v1.1.0
- Added SVG support to the media management and image processing.
- Added the FileHelper::getMaxUploadFilesize method
- Added theme classes for theme-specific handling
- Added UI methods to load javascript and CSS includes from vendor packages
- Made the exception page theme compatible
- Made the bootstrap and jquery libraries theme-dependent
- Removed the obsolete JQUERY_VERSION constant and related methods
- Removed obsolete images in the default theme
- Moved the datagrid fullview HTML scaffold to a theme template
- Fixed a loadtime error in building the framework URLs
- Fixed a bug in the localization PHP tokens parser
- Fixed native DBA message not being included in some cases in DBHelper

v1.0.7
- ConvertHelper: Added the timestamp2date method
- Driver: Added the getTempFile() method as alias of the Application method
- Devel Areas: Added the database dumps generation screen
- Framework: Added the database dumps management class Application_DBDumps
- FileHelper: Added the SQL mime type, now throwing an exception if the mime type is not found when sending a file

v1.0.6
- DBHelper: Modified the exception error messages to be more explicit
- UI: Added an error check when building include URLs
- Users: Added some missing doc blocks
- Templates: Removed some obsolete/unneeded templates
- Templates: Removed some obsolete references
- Updaters: Moved HTML to a template file
- Cleaned up some code to remove IDE code analysis warnings

v1.0.5
- Removed obsolete HTML_QuickForm2 customized classes
- Now loading HTML_QuickForm2 from the Mistralys fork
- Added stripping of control chars in form fields (previously in custom QuickForm2 classes)
- Added the form compileValues() method

v1.0.4
- Added float form element validation
- Improved rendering of form element example value lists

v1.0.3
- Added a base class for page section contents
- Added more page section contents
- Added the simulation badge to confirmation dialogs

v1.0.2
- Fixed a bug in the LDAP::getRights() method that could ignore the first submitted role

v1.0.1
- Fixed a path for loading API methods
- Fixed users collection record class name
- Added driver method to create users collection

v1.0.0
- Initial release after splitting from SPIN
